@using Microsoft.AspNetCore.Identity
@using Witter.Data.Models
@using Witter.Services.Data.Contracts
@model Witter.Web.ViewModels.Profile.ProfileViewModel
@inject UserManager<ApplicationUser> UserManager
@inject IFollowerService followerService
@inject ILikeService likeService
@{
    ViewBag.Title = "Profile - (@" + @Model.UserName + ")";
}
<div class="container">
    <div class="row">
        <div class="col-xs-12 col-sm-6 col-md-6 pb-4 border-bottom">
            <div class="well well-sm">
                <div class="row justify-content-between">
                    <div class="col">
                        <img src="https://via.placeholder.com/150" alt="" class="img-rounded img-responsive" />
                    </div>
                    <div class="col">
                        <h4>
                            @Model.UserName
                        </h4>
                        <small>
                            <cite title="San Francisco, USA">
                                San Francisco, USA <i class="glyphicon glyphicon-map-marker">
                                </i>
                            </cite>
                        </small>
                        <p>
                            <i class="glyphicon glyphicon-envelope"></i>@Model.UserName@@test.com
                            <br />
                            <i class="glyphicon glyphicon-gift"></i>@Model.CreatedOn
                        </p>
                        @if (this.UserManager.GetUserAsync(this.User).Result.Id != @Model.Id)
                        {
                            @if (!this.followerService.IsFollowing(this.UserManager.GetUserAsync(this.User).Result.Id, @Model.Id))
                            {
                                @Html.ActionLink("Follow", "Follow", "Profile", new { id = @Model.Id }, new { @class = "btn btn-success" })
                            }
                            else
                            {
                                @Html.ActionLink("UnFollow", "UnFollow", "Profile", new { id = @Model.Id }, new { @class = "btn btn-danger" })
                            }
                        }
                        else
                        {
                            @Html.ActionLink("Settings", "index", "Settings", null, new { @class = "btn btn-warning" })
                        }
                    </div>
                    <div class="col">
                        <p class="mb-0">Followers:</p>
                        <small>@Model.Followers</small>
                        <p class="mb-0">Following:</p>
                        <small>@Model.Following</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @if (!Model.Weets.Any())
    {
        <h3 class="text-center mt-3">You don't have any posts.</h3>
    }
    else
    {
        @foreach (var weet in Model.Weets.OrderByDescending(x => x.CreatedOn))
        {
            <div class="row">
                <div class="card border-0" id=@weet.Id>
                    <div class="card-body border-bottom">
                        <h6 class="card-subtitle mb-2 text-muted">
                            Created: @weet.CreatedOnOffset.
                        </h6>
                        <p class="card-text">@weet.Content</p>
                        @if (await this.UserManager.GetUserAsync(this.User) == @weet.Author)
                        {
                            <div class="btn-group dropleft">
                                <button type="button" class="btn btn-secondary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    Dropleft
                                </button>
                                <div class="dropdown-menu">
                                    @Html.ActionLink("Edit", "Update", "Weets", new { id = @weet.Id }, new { @class = "dropdown-item" })
                                    @Html.ActionLink("Delete", "Delete", "Weets", new { id = @weet.Id }, new { @class = "dropdown-item" })
                                </div>
                            </div>
                        }
                        @if (this.User.Identity.IsAuthenticated)
                        {
                            @if (!this.likeService.IsLiked(this.UserManager.GetUserAsync(this.User).GetAwaiter().GetResult().Id, weet.Id.ToString()))
                            {
                                @Html.ActionLink("Like (" + this.likeService.LikesCount(weet.Id.ToString()) + ")", "Like", "Weets", new { id = @weet.Id }, new { @class = "btn btn-info" })
                            }
                            else
                            {
                                @Html.ActionLink("DisLike (" + this.likeService.LikesCount(weet.Id.ToString()) + ")", "DisLike", "Weets", new { id = @weet.Id }, new { @class = "btn btn-danger" })
                            }
                        }
                        @Html.ActionLink("See more.. ", "Detail", "Weets", new { id = @weet.Id }, new { @class = "btn btn-warning" })
                    </div>
                </div>
            </div>
        }
    }
</div>